#!/usr/bin/env ruby

require "bundler/setup"
require "fileutils"
require "json"
require "open-uri"
require "sinatra"
require "thread"
require "uri"
require "yaml"

ROOT = File.expand_path("../..", __FILE__)
VERSION = File.read(File.join(ROOT, 'VERSION')).strip.lines.first.strip

options = {
  environment: (ENV["APP_ENV"] || "development"),
  logging: true,
  dump_errors: true,
}

config = ENV["APP_CONFIG"] || File.join(ROOT, "config", "config.yml")
if File.file?(config)
  options = options.merge(Hash[YAML.load_file(config).map { |k, v| [k.to_sym, v] }])
end

discovery_uri = options.delete(:discovery_uri)

if options.delete(:master)
  process_type = :master
else
  process_type = :slave
end

if port = options.delete(:"http.port")
  options[:port] = port
end

if data = options.delete(:"data.dir")
  options[:public_folder] = data
  dir = File.new(data)
  unless dir.flock(File::LOCK_EX | File::LOCK_NB)
    raise("another process is using data.dir=#{data.inspect}")
  end
end

if logs = options.delete(:"logs.dir")
  file = File.new(File.join(logs, "#{process_type}.log"), "a+")
  file.sync = true
  unless file.flock(File::LOCK_EX | File::LOCK_NB)
    raise("another process is using logs.dir=#{logs.inspect}")
  end
  use Rack::CommonLogger, file
end

known_options = [
  :bind,
  :dump_errors,
  :environment,
  :logging,
  :port,
  :public_folder,
  :root,
  :sessions,
  :static,
]

options.each do |k, v|
  if known_options.include?(k)
    set k, v
  else
    STDERR.puts("unknown configuration: #{k}=#{v.inspect}")
    exit(1)
  end
end

pid = ENV["APP_PID"] || File.join(ROOT, "tmp", "pids", "#{process_type}.pid")
FileUtils.mkdir_p(File.dirname(pid))
File.write(pid, $$.to_s)

get "/type" do
  JSON.generate({"type": process_type})
end

get "/version" do
  JSON.generate({"version": VERSION})
end

$status = false
$nodes = {}
$nodes_lock = Mutex.new

if process_type == :master
  Thread.new do
    loop do
      $nodes_lock.synchronize do
        $nodes.delete_if do |node, t|
          if Integer === t
            10 <= (Time.new.to_i - t) # remove stale slave process
          else
            true
          end
        end
        $status = 2 <= $nodes.length # master requires at least 2 slaves
      end
      sleep(2 + rand())
    end
  end
else
  Thread.new do
    loop do
      if discovery_uri
        begin
          discovery = URI.join(URI.parse(discovery_uri), "join?#{URI.encode_www_form(environment: options[:environment], port: options[:port])}")
          join = JSON.parse(open(discovery).read)
          if join["join"] == "ok"
            $status = true
          else
            $status = false
            raise("failed: #{join.inspect}")
          end
        rescue => error
          STDERR.puts("failed to join: #{error.message}")
        end
      else
        STDERR.puts("no discovery_uri is configured.")
      end
      sleep(2 + rand())
    end
  end
end

get "/status" do
  if process_type == :master
    $nodes_lock.synchronize do
      if $status
        JSON.generate({"status": "ok"})
      else
        JSON.generate({"status": "ng", "error": "cluster is not ready"})
      end
    end
  else
    if $status
      JSON.generate({"status": "ok"})
    else
      JSON.generate({"status": "ng", "error": "not a member of a cluster"})
    end
  end
end

get "/join" do
  if process_type == :master
    if params["environment"] != options[:environment]
      error 400, "no environment specified"
    end
    $nodes_lock.synchronize do
      $nodes["#{request.ip}:#{params["port"] || options[:port]}"] = Time.new.to_i
    end
    JSON.generate({"join": "ok"})
  else
    error 400, "not a master process"
  end
end

get "/leave" do
  if process_type == :master
    if params["environment"] != options[:environment]
      error 400, "no environment specified"
    end
    $nodes_lock.synchronize do
      $nodes["#{request.ip}:#{params["port"] || options[:port]}"] = nil
    end
    JSON.generate({"leave": "ok"})
  else
    error 400, "not a master process"
  end
end

get "/nodes" do
  if process_type == :master
    JSON.generate({"nodes": $nodes.select { |k, v| v }.keys})
  else
    error 400, "not a master process"
  end
end
